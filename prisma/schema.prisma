generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String        @id @default(cuid())
  clerkId   String        @unique
  email     String        @unique
  firstName String?
  lastName  String?
  avatar    String?
  role      Role          @default(USER)
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  cartItems CartItem[]
  orders    Order[]
  reviews   Review[]
  addresses UserAddress[]

  @@map("users")
}

model Category {
  id           String    @id @default(cuid())
  categoryName String    @unique
  slug         String    @unique
  mainImage    String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]

  @@map("categories")
}

model Product {
  id          String                   @id @default(cuid())
  slug        String                   @unique
  productName String
  price       Float
  description String?
  categoryId  String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  featured    Boolean                  @default(false)
  features    String[]
  status      Status                   @default(ACTIVE)
  stock       Int                      @default(0) @db.SmallInt
  /// @ts-ignore
  searchText  Unsupported("tsvector")?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  images      ProductImage[]
  category    Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@index([categoryId])
  @@index([price])
  @@index([status, featured])
  @@index([createdAt])
  @@index([productName])
  @@index([searchText], type: Gin)
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id              String           @id @default(cuid())
  orderNumber     String           @unique
  userId          String?
  status          OrderStatus      @default(PENDING)
  customerEmail   String?
  subtotal        Float
  taxAmount       Float            @default(0)
  shippingAmount  Float            @default(0)
  total           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  contactInfo     ContactInfo?
  emailMetrics    EmailMetrics[]
  items           OrderItem[]
  user            User?            @relation(fields: [userId], references: [id])
  shippingAddress ShippingAddress?

  @@index([userId, status])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model ContactInfo {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("contact_info")
}

model ShippingAddress {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zip       String
  country   String   @default("Cuba")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping_addresses")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String?
  productSku  String?
  price       Float
  quantity    Int
  total       Float
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId, rating])
  @@index([isApproved])
  @@index([createdAt])
  @@map("reviews")
}

model UserAddress {
  id        String      @id @default(cuid())
  type      AddressType @default(HOME)
  street    String
  city      String
  state     String
  zipCode   String
  country   String      @default("Colombia")
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
  @@map("user_addresses")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("cart_items")
}

model EmailMetrics {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  type      String
  recipient String
  orderId   String
  status    String
  attempt   Int
  error     String?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("email_metrics")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  FAILED
}

enum AddressType {
  HOME
  WORK
  OTHER
}
